-- WANTAM.INK Database Schema
-- Run this in the Supabase SQL Editor to set up the necessary tables and functions

-- Enable Row Level Security
ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

-- Create pledges table
CREATE TABLE IF NOT EXISTS public.pledges (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  phone TEXT NOT NULL,
  county TEXT NOT NULL,
  transaction_id TEXT UNIQUE,
  amount TEXT,
  ts TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  payload JSONB
);

COMMENT ON TABLE public.pledges IS 'MPESA-verified pledges from users';

ALTER TABLE public.pledges ENABLE ROW LEVEL SECURITY;

-- Create verified_users table
CREATE TABLE IF NOT EXISTS public.verified_users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  phone TEXT UNIQUE,
  verified_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  verification_method TEXT NOT NULL DEFAULT 'mpesa',
  transaction_id TEXT,
  telegram_id TEXT UNIQUE
);

COMMENT ON TABLE public.verified_users IS 'Users who have verified via MPESA or other means';

ALTER TABLE public.verified_users ENABLE ROW LEVEL SECURITY;

-- Create meme_entries table
CREATE TABLE IF NOT EXISTS public.meme_entries (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  url TEXT NOT NULL,
  user UUID NOT NULL,
  week INTEGER NOT NULL,
  votes INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  request_id UUID
);

COMMENT ON TABLE public.meme_entries IS 'Weekly meme contest entries';

ALTER TABLE public.meme_entries ENABLE ROW LEVEL SECURITY;

-- Create meme_votes table
CREATE TABLE IF NOT EXISTS public.meme_votes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user UUID NOT NULL,
  meme_id UUID NOT NULL REFERENCES public.meme_entries(id) ON DELETE CASCADE,
  week INTEGER NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  request_id UUID,
  UNIQUE(user, week)
);

COMMENT ON TABLE public.meme_votes IS 'Votes for meme contest entries';

ALTER TABLE public.meme_votes ENABLE ROW LEVEL SECURITY;

-- Create budgets table
CREATE TABLE IF NOT EXISTS public.budgets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  file_name TEXT NOT NULL,
  file_url TEXT NOT NULL,
  summary TEXT NOT NULL,
  key_points JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  user_id UUID,
  request_id UUID
);

COMMENT ON TABLE public.budgets IS 'Budget summaries generated by the Budget Agent';

ALTER TABLE public.budgets ENABLE ROW LEVEL SECURITY;

-- Create api_quotas table
CREATE TABLE IF NOT EXISTS public.api_quotas (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  date DATE NOT NULL,
  api TEXT NOT NULL,
  count INTEGER NOT NULL DEFAULT 1,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(date, api)
);

COMMENT ON TABLE public.api_quotas IS 'API quota tracking for rate limiting';

ALTER TABLE public.api_quotas ENABLE ROW LEVEL SECURITY;

-- Create rate_limits table
CREATE TABLE IF NOT EXISTS public.rate_limits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ip TEXT NOT NULL,
  endpoint TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.rate_limits IS 'Rate limiting data for API endpoints';

ALTER TABLE public.rate_limits ENABLE ROW LEVEL SECURITY;

-- Create request_queue table
CREATE TABLE IF NOT EXISTS public.request_queue (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  endpoint TEXT NOT NULL,
  data JSONB,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  processed_at TIMESTAMPTZ
);

COMMENT ON TABLE public.request_queue IS 'Queue for processing requests asynchronously';

ALTER TABLE public.request_queue ENABLE ROW LEVEL SECURITY;

-- Create telegram_users table
CREATE TABLE IF NOT EXISTS public.telegram_users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  telegram_id TEXT UNIQUE NOT NULL,
  first_name TEXT,
  last_name TEXT,
  username TEXT,
  chat_id TEXT,
  verified BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.telegram_users IS 'Users from Telegram bot';

ALTER TABLE public.telegram_users ENABLE ROW LEVEL SECURITY;

-- Create polls table
CREATE TABLE IF NOT EXISTS public.polls (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  chat_id TEXT NOT NULL,
  question TEXT NOT NULL,
  created_by TEXT,
  results JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.polls IS 'Polls created via Telegram bot';

ALTER TABLE public.polls ENABLE ROW LEVEL SECURITY;

-- Create boost_intent table
CREATE TABLE IF NOT EXISTS public.boost_intent (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,
  post_id TEXT NOT NULL,
  chat_id TEXT,
  completed BOOLEAN NOT NULL DEFAULT FALSE,
  transaction_id TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_at TIMESTAMPTZ
);

COMMENT ON TABLE public.boost_intent IS 'Intent to boost posts with $WANTAM tokens';

ALTER TABLE public.boost_intent ENABLE ROW LEVEL SECURITY;

-- Create bot_analytics table
CREATE TABLE IF NOT EXISTS public.bot_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  command TEXT NOT NULL,
  chat_id TEXT NOT NULL,
  user_id TEXT,
  chat_type TEXT,
  metadata JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.bot_analytics IS 'Analytics data for Telegram bot usage';

ALTER TABLE public.bot_analytics ENABLE ROW LEVEL SECURITY;

-- Create tips table
CREATE TABLE IF NOT EXISTS public.tips (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID,
  signature TEXT NOT NULL,
  amount BIGINT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.tips IS 'Tips sent to the Clean-Slate Fund';

ALTER TABLE public.tips ENABLE ROW LEVEL SECURITY;

-- Create test_data table (for testing)
CREATE TABLE IF NOT EXISTS public.test_data (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  environment TEXT NOT NULL,
  data JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.test_data IS 'Test data for automated testing';

ALTER TABLE public.test_data ENABLE ROW LEVEL SECURITY;

-- Create votes for meme function
CREATE OR REPLACE FUNCTION vote_for_meme(
  p_meme_id UUID,
  p_user_id UUID,
  p_week INTEGER
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if user has already voted this week
  IF EXISTS (
    SELECT 1 FROM meme_votes
    WHERE user = p_user_id AND week = p_week
  ) THEN
    RETURN FALSE;
  END IF;
  
  -- Insert vote
  INSERT INTO meme_votes (user, meme_id, week, created_at)
  VALUES (p_user_id, p_meme_id, p_week, NOW());
  
  -- Increment meme votes
  UPDATE meme_entries
  SET votes = votes + 1
  WHERE id = p_meme_id;
  
  RETURN TRUE;
END;
$$;

-- Create RLS policies

-- Pledges: Anyone can select, only server can insert/update
CREATE POLICY "Public can select pledges" 
  ON public.pledges FOR SELECT USING (true);

CREATE POLICY "Server can insert pledges" 
  ON public.pledges FOR INSERT WITH CHECK (true);

-- Verified users: Only self can select, only server can insert/update
CREATE POLICY "Users can see own verification" 
  ON public.verified_users FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Server can insert verified users" 
  ON public.verified_users FOR INSERT WITH CHECK (true);

-- Meme entries: Anyone can select, only verified users can insert
CREATE POLICY "Public can select meme entries" 
  ON public.meme_entries FOR SELECT USING (true);

CREATE POLICY "Verified users can insert meme entries" 
  ON public.meme_entries FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM verified_users WHERE user_id = auth.uid()
    )
  );

-- Meme votes: Anyone can select, only verified users can insert
CREATE POLICY "Public can select meme votes" 
  ON public.meme_votes FOR SELECT USING (true);

CREATE POLICY "Verified users can insert meme votes" 
  ON public.meme_votes FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM verified_users WHERE user_id = auth.uid()
    )
  );

-- Budgets: Anyone can select, only server can insert
CREATE POLICY "Public can select budgets" 
  ON public.budgets FOR SELECT USING (true);

CREATE POLICY "Server can insert budgets" 
  ON public.budgets FOR INSERT WITH CHECK (true);

-- API quotas: Only server can access
CREATE POLICY "Server can access API quotas" 
  ON public.api_quotas USING (true);

-- Rate limits: Only server can access
CREATE POLICY "Server can access rate limits" 
  ON public.rate_limits USING (true);

-- Request queue: Only server can access
CREATE POLICY "Server can access request queue" 
  ON public.request_queue USING (true);

-- Telegram users: Only server can access
CREATE POLICY "Server can access Telegram users" 
  ON public.telegram_users USING (true);

-- Polls: Anyone can select, only verified users can insert
CREATE POLICY "Public can select polls" 
  ON public.polls FOR SELECT USING (true);

CREATE POLICY "Verified users can insert polls" 
  ON public.polls FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM verified_users WHERE user_id = auth.uid()
    )
  );

-- Boost intent: Anyone can select, only verified users can insert
CREATE POLICY "Public can select boost intent" 
  ON public.boost_intent FOR SELECT USING (true);

CREATE POLICY "Verified users can insert boost intent" 
  ON public.boost_intent FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM verified_users WHERE user_id = auth.uid()
    )
  );

-- Bot analytics: Only server can access
CREATE POLICY "Server can access bot analytics" 
  ON public.bot_analytics USING (true);

-- Tips: Only server can insert, users can see their own
CREATE POLICY "Users can see own tips" 
  ON public.tips FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Server can insert tips" 
  ON public.tips FOR INSERT WITH CHECK (true);

-- Test data: Only server can access
CREATE POLICY "Server can access test data" 
  ON public.test_data USING (true);

-- Create indexes for performance

-- Pledges
CREATE INDEX IF NOT EXISTS pledges_county_idx ON public.pledges (county);
CREATE INDEX IF NOT EXISTS pledges_ts_idx ON public.pledges (ts DESC);

-- Verified users
CREATE INDEX IF NOT EXISTS verified_users_phone_idx ON public.verified_users (phone);
CREATE INDEX IF NOT EXISTS verified_users_telegram_id_idx ON public.verified_users (telegram_id);

-- Meme entries
CREATE INDEX IF NOT EXISTS meme_entries_week_idx ON public.meme_entries (week);
CREATE INDEX IF NOT EXISTS meme_entries_votes_idx ON public.meme_entries (votes DESC);

-- Meme votes
CREATE INDEX IF NOT EXISTS meme_votes_week_idx ON public.meme_votes (week);
CREATE INDEX IF NOT EXISTS meme_votes_meme_id_idx ON public.meme_votes (meme_id);

-- API quotas
CREATE INDEX IF NOT EXISTS api_quotas_date_api_idx ON public.api_quotas (date, api);

-- Rate limits
CREATE INDEX IF NOT EXISTS rate_limits_ip_endpoint_idx ON public.rate_limits (ip, endpoint);
CREATE INDEX IF NOT EXISTS rate_limits_created_at_idx ON public.rate_limits (created_at DESC);

-- Request queue
CREATE INDEX IF NOT EXISTS request_queue_status_idx ON public.request_queue (status);
CREATE INDEX IF NOT EXISTS request_queue_created_at_idx ON public.request_queue (created_at DESC);

-- Telegram users
CREATE INDEX IF NOT EXISTS telegram_users_telegram_id_idx ON public.telegram_users (telegram_id);

-- Polls
CREATE INDEX IF NOT EXISTS polls_chat_id_idx ON public.polls (chat_id);
CREATE INDEX IF NOT EXISTS polls_created_by_idx ON public.polls (created_by);

-- Boost intent
CREATE INDEX IF NOT EXISTS boost_intent_user_id_idx ON public.boost_intent (user_id);
CREATE INDEX IF NOT EXISTS boost_intent_post_id_idx ON public.boost_intent (post_id);

-- Bot analytics
CREATE INDEX IF NOT EXISTS bot_analytics_command_idx ON public.bot_analytics (command);
CREATE INDEX IF NOT EXISTS bot_analytics_user_id_idx ON public.bot_analytics (user_id);

-- Tips
CREATE INDEX IF NOT EXISTS tips_user_id_idx ON public.tips (user_id);
CREATE INDEX IF NOT EXISTS tips_created_at_idx ON public.tips (created_at DESC);

-- Scheduled Jobs (using Supabase's pg_cron extension)

-- Purge old rate limits (daily at midnight)
SELECT cron.schedule(
  'purge-rate-limits',
  '0 0 * * *',
  $$
    DELETE FROM public.rate_limits 
    WHERE created_at < NOW() - INTERVAL '7 days'
  $$
);

-- Reset API quotas (daily at midnight)
SELECT cron.schedule(
  'reset-api-quotas',
  '0 0 * * *',
  $$
    INSERT INTO public.api_quotas (date, api, count)
    VALUES (CURRENT_DATE, 'huggingface', 0)
    ON CONFLICT (date, api) DO
    UPDATE SET count = 0
  $$
);

-- Process queued requests (every 15 minutes)
SELECT cron.schedule(
  'process-queued-requests',
  '*/15 * * * *',
  $$
    UPDATE public.request_queue
    SET status = 'processing'
    WHERE status = 'pending'
    ORDER BY created_at ASC
    LIMIT 5
  $$
);

-- Clean up old completed requests (weekly)
SELECT cron.schedule(
  'clean-completed-requests',
  '0 0 * * 0',
  $$
    DELETE FROM public.request_queue
    WHERE status = 'completed'
    AND processed_at < NOW() - INTERVAL '30 days'
  $$
);

-- Determine meme contest winner (Sunday at 23:59)
SELECT cron.schedule(
  'meme-contest-winner',
  '59 23 * * 0',
  $$
    WITH winners AS (
      SELECT 
        id, 
        url, 
        user, 
        votes,
        week,
        ROW_NUMBER() OVER (PARTITION BY week ORDER BY votes DESC) AS rank
      FROM public.meme_entries
      WHERE week = EXTRACT(WEEK FROM CURRENT_DATE)::INTEGER
    )
    UPDATE public.meme_entries m
    SET metadata = jsonb_build_object('winner', true, 'rank', w.rank)
    FROM winners w
    WHERE m.id = w.id
    AND w.rank = 1
  $$
);
